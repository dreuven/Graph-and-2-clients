package trip;

import graph.DirectedGraph;
import graph.LabeledGraph;
import graph.SimpleShortestPaths;

import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;

import java.util.HashMap;
import java.util.InputMismatchException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.io.FileNotFoundException;

import static trip.Main.error;

/** Encapsulates a map containing sites, positions, and road distances between
 *  them.
 *  @author Doron Reuven.
 */
class Trip {

    /** Read map file named NAME into out map graph. */
    void readMap(String name) {
        int n;
        n = 0;
        try {
            Scanner inp = new Scanner(new BufferedReader(new FileReader(name)));
            while (inp.hasNext()) {
                n += 1;
                switch (inp.next()) {
                case "L":
                    addLocation(inp.next(), inp.nextDouble(), inp.nextDouble());
                    break;
                case "R":
                    addRoad(inp.next(), inp.next(), inp.nextDouble(),
                            Direction.parse(inp.next()), inp.next());
                    break;
                default:
                    error("map entry #%d: unknown type", n);
                    break;
                }
            }
        } catch (FileNotFoundException excp) {
            error(excp.getMessage());
        } catch (InputMismatchException excp) {
            error("bad entry #%d", n);
        } catch (NoSuchElementException excp) {
            error("entry incomplete at end of file");
        }
    }

    /** Produce a report on the standard output of a shortest journey from
     *  DESTS[0], then DESTS[1], .... */
    void makeTrip(String[] dests) {
        if (dests.length < 2) {
            error("must have at least two locations for a trip");
        }
        System.out.printf("From %s:%n%n", dests[0]);
        int step;
        step = 1;
        for (int i = 1; i < dests.length; i += 1) {
            Integer
                from = _sites.get(dests[i - 1]),
                to = _sites.get(dests[i]);
            if (from == null) {
                error("No location named %s", dests[i - 1]);
            } else if (to == null) {
                error("No location named %s", dests[i]);
            }
            TripPlan plan = new TripPlan(from, to);
            plan.setPaths();
            //System.out.println("JUST FINISHED SETTING PATHS");
            List<Integer> segment = plan.pathTo(to);
            step = reportSegment(step, from, segment);
        }
    }

    /** Print out a written description of the location sequence SEGMENT,
     *  starting at FROM, and numbering the lines of the description starting
     *  at SEQ.  That is, FROM and each item in SEGMENT are the
     *  numbers of vertices representing locations.  Together, they
     *  specify the starting point and vertices along a path where
     *  each vertex is joined to the next by an edge.  Returns the
     *  next sequence number.  The format is as described in the
     *  project specification.  That is, each line but the last in the
     *  segment is formated like this example:
     *      1. Take University_Ave west for 0.1 miles.
     *  and the last like this:
     *      5. Take I-80 west for 8.4 miles to San_Francisco.
     *  Adjacent roads with the same name and direction are combined.
     *  */
    int reportSegment(int seq, int from, List<Integer> segment) {
        String currPlace = "";
        String currDir = "";
        int whereIamInSeg = segment.indexOf(from);
        //System.out.println("WHERE I AM IN SEG " + whereIamInSeg);
        int count = whereIamInSeg;
        double sumDist = 0;
        double distToTravel;
        while (count < segment.size() - 2) {
            //System.out.println("MY COUNT IS: " + count);
            Road myRoad = _map.getLabel(segment.get(count), segment.get(count + 1));
            //System.out.println(myRoad.toString());
            // System.out.println(myRoad.length());
            String nameRd = myRoad.toString();
            distToTravel = myRoad.length();
            String myDir = myRoad.direction().fullName();
            if (count == whereIamInSeg) {
                //System.out.println("SHOULD ONLYGET HERE ONCE");
                currPlace = nameRd;
                currDir = myDir;
                sumDist += distToTravel;
            } else {
                if (nameRd.equals(currPlace) && myDir.equals(currDir)) {
                    sumDist += distToTravel;
                } else {
                    //System.out.printf("Hello I'm doron and I am %d years old, and I weigh %.1f pounds.%n", 20, 300.35);
                    //System.out.printf("%s. Take %c %m for %.1f miles.", seq, currPlace, myDir, sumDist);
                    //System.out.println("MY CURR DIR IS: " + currDir);
                    System.out.printf("%d. Take %s %s for %.1f miles.%n", seq, currPlace, currDir, sumDist);
                    //System.out.println(seq + ".Take " + currPlace + " " + myDir + " for " + sumDist + " miles.");
                    seq += 1;
                    currPlace = nameRd;
                    sumDist = distToTravel;
                    currDir = myDir;
                }
            }
            count += 1;
        }
        //System.out.println("GOT HERE");
        int last = segment.size() - 1;
        // System.out.println("PRINTING COUNT "+ count);
        // System.out.println("THE LAST INDEX IS "+ last);
        Road lastRd = _map.getLabel(segment.get(count), segment.get(last));
        String nameLast = lastRd.toString();
        double lastDist = lastRd.length();
        String lastDir = lastRd.direction().fullName();
        String dest = _map.getLabel(segment.get(last)).toString();
        // String dest2 = _map.getLabel(last).toString();
        // System.out.println("LAST PLUS 1 NODE IS " + dest);
        // System.out.println("LAST NODE IS " + dest);

        if (currPlace.equals(nameLast) && lastDir.equals(currDir)) {
            //System.out.printf("Hello I'm doron and I am %d years old, and I weigh %.1f pounds.%n", 20, 300.3);
            sumDist += lastDist;
            //System.out.printf("%s. Take %curr %lD for %.1sD miles to %dest.",currPlace, lastDir,sumDist,dest);
            System.out.printf("%d. Take %s %s for %.1f miles to %s.%n", seq, currPlace, lastDir, sumDist, dest);
            //System.out.println(seq + ". Take " + currPlace + " " + lastDir + " for " + sumDist + "miles to " + dest +".");
        } else {
            System.out.printf("%d. Take %s %s for %.1f miles. %n", seq, currPlace, currDir, sumDist);
            //System.out.println(seq + ". Take " + currPlace + " " + currDir + " for " + sumDist + " miles.");
            seq += 1;
            System.out.printf("%d. Take %s %s for %.1f miles to %s.%n", seq, nameLast, lastDir, lastDist, dest);
            seq += 1;
            //System.out.println(seq + ". Take " + nameLast + " " + lastDir + " for " + lastDist + "miles to " + dest +".");
        }
        return seq;
    }

    /** Add a new location named NAME at (X, Y). */
    private void addLocation(String name, double x, double y) {
        if (_sites.containsKey(name)) {
            error("multiple entries for %s", name);
        }
        int v = _map.add(new Location(name, x, y));
        _sites.put(name, v);
    }

    /** Add a stretch of road named NAME from the Location named FROM
     *  to the location named TO, running in direction DIR, and
     *  LENGTH miles long.  Add a reverse segment going back from TO
     *  to FROM. */
    private void addRoad(String from, String name, double length,
                         Direction dir, String to) {
        Integer v0 = _sites.get(from),
            v1 = _sites.get(to);

        if (v0 == null) {
            error("location %s not defined", from);
        } else if (v1 == null) {
            error("location %s not defined", to);
        }
        Road nR1 = new Road(name, dir, length);
        Road nR2 = new Road(name, dir.reverse(), length);
        _map.add(v0, v1, nR1);
        _map.add(v1, v0, nR2);
        // FILL THIS IN TO CREATE TWO EDGES LABELED WITH ROADS FROM V0 to V1
        // AND BACK.
    }

    /** Represents the network of Locations and Roads. */
    private RoadMap _map = new RoadMap();
    /** Mapping of Location names to corresponding map vertices. */
    private HashMap<String, Integer> _sites = new HashMap<>();

    /** A labeled directed graph of Locations whose edges are labeled by
     *  Roads. */
    private static class RoadMap extends LabeledGraph<Location, Road> {
        /** An empty RoadMap. */
        RoadMap() {
            super(new DirectedGraph());
        }
    }

    /** Paths in _map from a given location. */
    private class TripPlan extends SimpleShortestPaths {
        /** A plan for travel from START to DEST according to _map. */
        TripPlan(int start, int dest) {
            super(_map, start, dest);
            _finalLocation = _map.getLabel(dest);
        }

        @Override
        protected double getWeight(int u, int v) {
            return _map.getLabel(u, v).length();
        }

        @Override
        protected double estimatedDistance(int v) {
            return _finalLocation.dist(_map.getLabel(v));
        }
        /** Location of the destination. */
        private final Location _finalLocation;

    }
}
