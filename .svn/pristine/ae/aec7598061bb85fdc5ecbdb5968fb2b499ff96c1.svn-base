package graph;

import org.junit.Test;
import static org.junit.Assert.*;

/** Unit tests for the Graph class.
 *  @author Doron Reuven.
 */
public class GraphTesting {

    // Add tests.  Here's a sample.

    @Test
    public void emptyGraph() {
        DirectedGraph g = new DirectedGraph();
        assertEquals("Initial graph has vertices", 0, g.vertexSize());
        assertEquals("Initial graph has edges", 0, g.edgeSize());
    }
    @Test
    public void amalgamateTestsForDirected() {
        DirectedGraph g = new DirectedGraph();
        g.add();
        g.add();
        g.add();
        assertEquals(3, g.vertexSize());
        assertEquals(3, g.maxVertex());
        g.add(1, 2);
        g.add(2, 3);
        g.add(1, 1);
        assertTrue(g.contains(1, 2));
        assertTrue(g.contains(2, 3));
        assertTrue(g.contains(1, 1));
        assertFalse(g.contains(2, 1));
        g.remove(2);
        assertTrue(g.contains(1,1));
        assertFalse(g.contains(1,2));
        assertFalse(g.contains(2, 3));
        assertEquals(2, g.vertexSize());
        assertFalse(g.contains(2, 3));
        g.add();
        assertTrue(g.contains(2));
        g.add(2, 1);
        assertFalse(g.contains(1, 2));
    }

    @Test
    public void testSize() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	assertEquals(3, g.vertexSize());
    	g.remove(2);
    	assertEquals(2, g.vertexSize());
    }
    @Test
    public void testContainsEdge() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	g.add(1, 1);
    	g.add(1, 2);
    	g.add(2, 3);
    	assertTrue(g.contains(1, 1));
    	assertTrue(g.contains(1, 2));
    	assertTrue(g.contains(2, 3));
    	assertFalse(g.contains(2, 1));
    	g.remove(1, 2);
    	assertFalse(g.contains(1, 2));
    	g.add(1, 2);
    	g.remove(2);
    	assertFalse(g.contains(2, 3));
    	assertFalse(g.contains(1, 2));
    }
    @Test
    public void testDuplicateAdds() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add(1, 2);
    	g.add(1, 2);
    	assertEquals(1, g.edgeSize());
    }

    @Test
    public void testUndirectedEdgesContain() {
    	UndirectedGraph g = new UndirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	g.add(1, 2);
    	g.add(2, 3);
        assertTrue(g.contains(1, 2));
        assertTrue(g.contains(2, 1));
        assertTrue(g.contains(2, 3));
        assertTrue(g.contains(3, 2));

    }
    @Test
    public void testUndirectedContainAndRemoveVert() {
        UndirectedGraph g = new UndirectedGraph();
        g.add();
        g.add();
        g.add();
        assertTrue(g.contains(1));
        assertTrue(g.contains(2));
        assertTrue(g.contains(3));
        g.remove(2);
        assertFalse(g.contains(2));
    }
    @Test
    public void testUndirectedOutDegree() {
        UndirectedGraph g = new UndirectedGraph();
        g.add();
        g.add();
        g.add();
        g.add(1, 2);
        g.add(2, 3);
        assertEquals(2, g.outDegree(2));
        assertEquals(1, g.outDegree(1));
        assertEquals(1, g.outDegree(3));
    }
        @Test
    public void testDirectedOutDegree() {
        DirectedGraph g = new DirectedGraph();
        g.add();
        g.add();
        g.add();
        g.add(1, 2);
        g.add(1, 3);
        assertEquals(2, g.outDegree(1));
        assertEquals(0, g.outDegree(3));
        g.add(3, 1);
        assertEquals(1, g.outDegree(3));
    }
}
